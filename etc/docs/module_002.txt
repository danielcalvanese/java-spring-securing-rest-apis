1
Configure Spring Security for Method-based Security

In the previous module, we added some very basic filter-based authorization via the DSL. Now, we are going to add method-based authorization.

First, quite simply, add the @EnableGlobalMethodSecurity annotation to the ResolutionsApplication class:

@EnableGlobalMethodSecurity(prePostEnabled = true)
@SpringBootApplication
public class ResolutionsApplication extends WebSecurityConfigurerAdapter {
    // ...
}
2
Annotate Methods with @PreAuthorize

To replace

.authorizeRequests(authz -> authz
    .mvcMatchers(GET, "/resolutions", "/resolution/**").hasAuthority("resolution:read")
    .anyRequest().hasAuthority("resolution:write"))
with method-based security, we'll need to annotate each method in ResolutionController.

First, open up ResolutionController.

Then, for each request-mapped method, indicate what authority that method requires, using the @PreAuthorize annotation. For ResolutionController#read do:

@GetMapping("/resolutions")
@PreAuthorize("hasAuthority('resolution:read')")
public Iterable<Resolution> read() {
    // ...
}
For ResolutionController#read(UUID) do:

@GetMapping("/resolution/{id}")
@PreAuthorize("hasAuthority('resolution:read')")
public Optional<Resolution> read(@PathVariable("id") UUID id) {
    // ...
}
For ResolutionController#make(String) do:

@PostMapping("/resolution")
@PreAuthorize("hasAuthority('resolution:write')")
public Resolution make(@CurrentUsername String owner, @RequestBody String text) {
    // ...
}
For ResolutionController#revise(UUID, String) do:

@PutMapping("/resolution/{id}/revise")
@PreAuthorize("hasAuthority('resolution:write')")
public Optional<Resolution> revise(@PathVariable("id") UUID id, @RequestBody String text) {
    // ...
}
And for ResolutionController#complete(UUID) do:

@PutMapping("/resolution/{id}/complete")
@PreAuthorize("hasAuthority('resolution:write')")
public Optional<Resolution> complete(@PathVariable("id") UUID id) {
    // ...
}
At that point, your WebSecurityConfigurerAdapter can be optionally simplified to:

http
    .authorizeRequests(authz -> authz
        .anyRequest().authenticated())
    .httpBasic(basic -> {});
Extra Credit
Clearly in a large application, pre-authorizing using filter expressions is going to be quite a bit easier than method-based in the long run. It's a bit of a temptation to want to address it at the method level and avoid the DSL. Note, however, that we've gone from having our authorization declarations centralized to having them dispersed throughout the application which is a drawback.

That said, we'll be adding additional annotations in just a moment that can't be expressed in the filter-based fashion, so method-based security certainly has its place.

3
Annotate Methods with @PostAuthorize

In this task, you'll prevent an Insecure Direct Object Reference using the @PostAuthorize annotation.

On the ResolutionController#read(UUID) method, add a @PostAuthorize annotation that compares the currently logged-in user to the owner of the Resolution retrieved:

@GetMapping("/resolution/{id}")
@PreAuthorize("hasAuthority('READ')")
@PostAuthorize("returnObject.orElse(null)?.owner == authentication.name")
public Optional<Resolution> read(UUID id) {
    // ...
}
Now, if a user obtains the id of a Resolution that doesn't belong to them, the API call will return a 403.

4
Annotate Methods with @PostFilter

In this task, you'll filter results from a query, only returning the ones that belong to the logged-in user.

In ResolutionController#read(), add the @PostFilter annotation, specifying that the owner of the Resolution needs to match the username of the logged-in user:

@GetMapping("/resolutions")
@PreAuthorize("hasAuthority('READ')")
@PostFilter("filterObject.owner == authentication.name")
public Iterable<Resolution> read() {
    // ...
}
Now, the /resolutions endpoint will only return resolutions that belong to the logged-in user.

Extra Credit
For large queries, this option doesn't really scale since it's having to pull large result sets from the database, hydrate them into instances of Resolution, only to simply throw away the majority of them. This causes needless GC pressure.

Check out the next step for a more scalable approach.

5
Resolve Logged-in User in Spring Data Query

In this task, you'll update the revise() and complete() methods to protect against an Insecure Direct Object Reference.

ResolutionController calls ResolutionRepository to manage Resolutions.

Open ResolutionRepository and use the authentication SpEL variable to include the current user in the WHERE clause.

Namely, change revise() from

@Modifying
@Query("UPDATE Resolution SET text = :text WHERE id = :id")
void revise(UUID id, String text);
to

@Modifying
@Query("UPDATE Resolution SET text = :text WHERE id = :id AND owner = ?#{authentication.name}")
void revise(UUID id, String text);
Also change complete() from

@Modifying
@Query("UPDATE Resolution SET completed = 1 WHERE id = :id")
void complete(UUID id);
to

@Modifying
@Query("UPDATE Resolution SET completed = 1 WHERE id = :id AND owner = ?#{authentication.name}")
void complete(UUID id);
Now, only the owner can revise and complete their own tasks, not just a user in possession of the Resolution's primary key. Also, at this point, update ResolutionController#revise() and ResolutionController#complete() to have the same @PostAuthorize annotations as the other added in an earlier task:

@PostAuthorize("returnObject.orElse(null)?.owner == authentication.name")
Run Now's a good time to run things locally and see the REST API in action

6
Introduce Logic Into Method-based Authorization Expressions

In this task, we'll consider the business requirement that admins have elevated permissions to see, for example, resolutions for all users.

First, create an admin user in ResolutionInitializer:

User admin = new User("admin","{bcrypt}$2a$10$bTu5ilpT4YILX8dOWM/05efJnoSlX4ElNnjhNopL9aPoRyUgvXAYa");
admin.grantAuthority("ROLE_ADMIN");
admin.grantAuthority("resolution:read");
admin.grantAuthority("resolution:write");
this.users.save(admin);
Second, update the authorization expressions for both ResolutionController#read methods.

Change read() to:

@PostFilter("filterObject.owner == authentication.name || hasRole('ADMIN')")
and read(UUID) to:

@PostAuthorize("returnObject.orElse(null)?.owner == authentication.name || hasRole('ADMIN')")
Now, logging in with admin/password will show all resolutions.

7
Extract Authorization Expression into a @Bean

In this task, you'll extract the logic you've been embedding in the @PostFilter and @PostAuthorize annotations out to a @Bean.

Remember that the logic we are replacing is:

filterObject.owner == authentication.name || hasRole('ADMIN')
To begin, open up ResolutionAuthorizer.

There, add the class to the application context, calling it post.

@Component("post")
public class ResolutionAuthorizer {
}
Then, add a filter() method that takes a MethodSecurityExpressionOperations as a parameter:

@Component("post")
public class ResolutionAuthorizer {
    public boolean filter(MethodSecurityExpressionOperations operations) {
        // ...
    }
}
Next, use the MethodSecurityExpressionOperations to programmatically perform the same logic as before:

If the user has the role of ADMIN, then return true.
If the Resolution object's owner equals the current user's username, then return true.
Accomplish this using the following code:

public boolean filter(MethodSecurityExpressionOperations operations) {
    if (operations.hasRole("ADMIN")) {
        return true;
    }
    String name = operations.getAuthentication().getName();
    Resolution resolution = (Resolution) operations.getFilterObject();
    return resolution.getOwner().equals(name);
}
The MethodSecurityExpressionOperations instance is the root object of method-based security SpEL expressions. So, back in ResolutionController , change the @PostFilter expression to:

@PostFilter("@post.filter(#root)")
Because of what you've done here, as authorization-needs grow more complex, the SpEL expression can stay the same.

Now, do the same thing for @PostAuthorize, remembering that the object returned from the read, revise, and complete methods is an Optional<Resolution>:

public boolean authorize(MethodSecurityExpressionOperations operations) {
    if (operations.hasRole("ADMIN")) {
        return true;
    }


    String name = operations.getAuthentication().getName();
    Optional<Resolution> resolution = (Optional<Resolution>) operations.getReturnObject();
    return resolution.map(Resolution::getOwner)
            .filter(owner -> owner.equals(name)).isPresent();
}
And update the read(), revise(), and complete() methods' @PostAuthorize annotations:

@PostAuthorize("@post.authorize(#root)")
8
Grant Authorities Programmatically

Earlier, you added the resolution:read and resolution:write permissions to the admin user manually.

In this task, you'll further customize UserRepositoryUserDetailsService to programmatically add the resolution:read and resolution:write permissions any time a user has the ADMIN role.

In UserRepositoryUserDetailsService, introduce a new method called map() that takes a User and returns a BridgeUser:

private BridgeUser map(User user) {
    return new BridgeUser(user);
}
Next, change loadUserByUsername() to call this method instead of the BridgeUser constructor:

@Override
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    return this.users.findByUsername(username)
            .map(this::map)
            .orElseThrow(() -> new UsernameNotFoundException("no user"));
}
Then, change BridgeUser's constructor to take a Collection of GrantedAuthoritys. Also, update the getAuthorities() method to return that value:

private static class BridgeUser extends User implements UserDetails {
    private final Collection<GrantedAuthority> authorities;

    public BridgeUser(User user, Collection<GrantedAuthority> authorities) {
        super(user);
        this.authorities = authorities;
    }

    public Collection<? extends GrantedAuthority> getAuthorities() {
        return this.authorities;
    }

    // ...
}
Next, modify the map method to also construct the Collection of GrantedAuthoritys based on the Collection of UserAuthoritys from the database:

private BridgeUser map(User user) {
    Collection<GrantedAuthority> authorities = new HashSet<>();
    for (UserAuthority userAuthority : user.getUserAuthorities()) {
        String authority = userAuthority.getAuthority();
        if ("ROLE_ADMIN".equals(authority)) {
            authorities.add(new SimpleGrantedAuthority("resolution:read"));
            authorities.add(new SimpleGrantedAuthority("resolution:write"));
        }
        authorities.add(new SimpleGrantedAuthority(authority));
    }
    return new BridgeUser(user, authorities);
}
And finally, remove the lines where the resolution:read and resolution:write permissions are being added for admin in ResolutionInitializer:

User admin = ...;
//...
admin.grantAuthority("resolution:read"); // remove
admin.grantAuthority("resolution:write"); // remove
Run Now's a good time to run things locally and see the REST API in action

Extra Credit
This may seem like a fair amount of boilerplate to do something that seems routine. For larger projects that have larger role hierarchy needs, you can take a look at GrantedAuthoritiesMapper and RoleHierarchy